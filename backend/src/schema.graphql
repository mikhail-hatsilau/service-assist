type Query {
    users: [User!]!
    user(id: ID!): User
    currentUser: User!
}

type Mutation {
    # auth operations
    signUp(
        email: String!,
        password: String!,
        firstName: String!,
        lastName: String!,
        birthday: String!,
        role: SignUpRolesEnum!
    ): AuthPayload
    login(email: String!, password: String!): AuthPayload

    # user operations
    createUser(firstName: String!, lastName: String!, birthday: String!, role: CreateRolesEnum!, email: String!): User!
    updateUser(id: ID!, firstName: String, lastName: String, birthday: String, role: CreateRolesEnum): User!
}

type User {
    id: ID!
    firstName: String!
    lastName: String!
    birthday: String!
    role: String!
    email: String!
    rating: Float!
    labels: [Label!]!
}

type Label {
    id: ID!
    title: String!
}

type AuthPayload {
    token: String!
    user: User!
}

enum CreateRolesEnum {
    admin
    client
    worker
}

enum SignUpRolesEnum {
    client
    worker
}